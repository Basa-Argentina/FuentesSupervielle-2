/*
 * Copyright 2011 Dividato. All rights reserved
 *
 * Copyright Version 1.0
 *
 * Create on 29/08/2011
 */
package com.security.accesoDatos.configuraciongeneral.hibernate;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.security.accesoDatos.configuraciongeneral.interfaz.LecturaService;
import com.security.accesoDatos.hibernate.GestorHibernate;
import com.security.accesoDatos.hibernate.HibernateControl;
import com.security.modelo.administracion.ClienteAsp;
import com.security.modelo.configuraciongeneral.Elemento;
import com.security.modelo.configuraciongeneral.Empresa;
import com.security.modelo.configuraciongeneral.Lectura;
import com.security.modelo.configuraciongeneral.LecturaDetalle;

/**
 * @author Victor Kenis
 *
 */
@Component
public class LecturaServiceImp extends GestorHibernate<Lectura> implements LecturaService {
	private static Logger logger=Logger.getLogger(LecturaServiceImp.class);
	
	@Autowired
	public LecturaServiceImp(HibernateControl hibernateControl) {
		super(hibernateControl);
	}

	@Override
	public Class<Lectura> getClaseModelo() {
		return Lectura.class;
	}

	@Override
	public Boolean guardarLectura(Lectura lectura) {
		Session session = null;
		Transaction tx = null;
		try {
			//obtenemos una sesión
			session = getSession();
			//creamos la transacción
			tx = session.getTransaction();
			tx.begin();
			//guardamos el objeto
			session.save(lectura);
			//hacemos commit a la transacción para que 
			//se refresque la base de datos.
			tx.commit();
			return true;
		} 
		catch (RuntimeException e) {
			rollback(tx, e, "No fue posible guardar");
			return false;
		}finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
	}
	
	@Override
	public Boolean actualizarLectura(Lectura lectura) {
		Session session = null;
		Transaction tx = null;
		try {
			//obtenemos una sesión
			session = getSession();
			//creamos la transacción
			tx = session.getTransaction();
			tx.begin();
			//guardamos el objeto
			session.update(lectura);
			//hacemos commit a la transacción para que 
			//se refresque la base de datos.
			tx.commit();
			return true;
		} 
		catch (RuntimeException e) {
			rollback(tx, e, "No fue posible Actualizar");
			return false;
		}finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
	}	
	
	@Override
	public Boolean eliminarLectura(Lectura lectura,List<LecturaDetalle> detalles) {
		Session session = null;
		Transaction tx = null;
		try {
			//obtenemos una sesión
			session = getSession();
			//creamos la transacción
			tx = session.getTransaction();
			tx.begin();
			
			if(detalles!=null && detalles.size()>0){
				for(LecturaDetalle detalle:detalles)
					session.delete(detalle);
			}
				
			//guardamos el objeto
			session.delete(lectura);
			//hacemos commit a la transacción para que 
			//se refresque la base de datos.
			tx.commit();
			return true;
		} 
		catch (RuntimeException e) {
			rollback(tx, e, "No fue posible eliminar");
			return false;
		}finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
	}	
	
	
	private void rollback(Transaction tx, Exception e, String mensaje){
		//si ocurre algún error intentamos hacer rollback
		if (tx != null && tx.isActive()) {
			try {
				tx.rollback();
	        } catch (HibernateException e1) {
	        	logger.error("no se pudo hacer rollback "+getClaseModelo().getName(), e1);
	        }
	        logger.error(mensaje+" "+getClaseModelo().getName(), e);
		}
	}
	
	@Override
	public Lectura obtenerPorCodigo(Long codigo, Boolean utilizada, Empresa empresa, ClienteAsp clienteAsp) {

		Session session = null;
		if(clienteAsp == null)
			return null;
		try {
			//obtenemos una sesión
			session = getSession();
			Criteria c = session.createCriteria(getClaseModelo());
			c.createCriteria("empresa", "emp");
			//filtro por codigo
			//if(codigo != null && !"".equals(codigo))
				c.add(Restrictions.eq("codigo", codigo));
			//filtro por utilizada
			if(utilizada!=null){
				c.add(Restrictions.eq("utilizada", utilizada));
			}
			//filtro por empresa
        	if(empresa != null)
        		c.add(Restrictions.eq("emp.id", empresa.getId()));
			//filtro por cliente
			c.add(Restrictions.eq("clienteAsp", clienteAsp));
			//Seteo propiedades de la consulta
			c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
			
			if(c.list().size() == 1)
				return (Lectura) c.list().get(0);
			return null;
		} catch (HibernateException e) {
			logger.error("no se pudo obtener lista",e);
			return null;
		}finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
	}
	
	@Override
	public Lectura obtenerPorCodigo(Long codigo, ClienteAsp clienteAsp) {
		Session session = null;
		if(clienteAsp == null)
			return null;
		try {
			//obtenemos una sesión
			session = getSession();
			Criteria c = session.createCriteria(getClaseModelo());			
			//filtro por codigo
			if(codigo != null && !"".equals(codigo))
				c.add(Restrictions.eq("codigo", codigo));
			
			//filtro por cliente
			c.add(Restrictions.eq("clienteAsp", clienteAsp));
			//Seteo propiedades de la consulta
			c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
			return (Lectura) c.uniqueResult();		
		} catch (HibernateException e) {
			logger.error("no se pudo obtener lista",e);
			return null;
		}finally{
			try{
				session.close();
			}catch(Exception e){
				logger.error("No se pudo cerrar la sesión", e);
			}
		}
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public Lectura verificarLectura(Lectura lectura){
		Session session = null;
        try {
        	//obtenemos una sesión
			session = getSession();
        	Criteria crit = session.createCriteria(getClaseModelo());
        	if(lectura!=null){
	        	if(lectura.getClienteAsp() != null)
	        		crit.createCriteria("clienteAsp").add(Restrictions.eq("id", lectura.getClienteAsp().getId()));
	        	if(lectura.getCodigo() !=null)
	        		crit.add(Restrictions.eq("codigo", lectura.getCodigo()));	      
        	}
        	crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        	List<Lectura> result = crit.list();
        	if(result.size() == 1){
        		return result.get(0);
        	}
            return null;
        } catch (HibernateException hibernateException) {
        	logger.error("No se pudo listar ", hibernateException);
	        return null;
        }finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
    }
	
	@Override
	public List<Lectura> listarLecturaPopup(String val, ClienteAsp clienteAsp, Empresa empresa)
	{
		return 	listarLecturaPopup(val, clienteAsp, empresa, null);
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public List<Lectura> listarLecturaPopup(String val, ClienteAsp clienteAsp, Empresa empresa, Boolean utilizada) {
		Session session = null;

		if(clienteAsp == null)
			return null;
        try {
        	
        	String consulta = "Select * from lecturas le "
        			+ "inner join clientesAsp cli on cli.id = le.clienteAsp_id and le.clienteAsp_id = " + clienteAsp.getId();
        	
        	//filtro por empresa
        	if(empresa != null)
        		consulta += " inner join empresas e on e.id = le.empresa_id and le.empresa_id = " +empresa.getId();

        	consulta += " where 1 = 1 ";
        	
        	//filtro no utilizada
        	if(utilizada != null)
        		consulta += " and le.utilizada = " + (utilizada==true? "1" : "0"); 
        	
        	String valores[] = null;
        	if(val!=null)
        		valores = val.split(" ");
        	//obtenemos una sesión
			session = getSession();

        	//filtro value
        	if(valores!=null && valores[0].length()!=0){
        		Long codigoFiltro = null;
        		for(String filtro : valores){
        			try{
        				codigoFiltro = Long.valueOf(filtro);
        			}catch(NumberFormatException ex){
        				codigoFiltro = null;
        			}
		        	if(codigoFiltro != null){
		        		consulta += " and le.codigo = " + codigoFiltro;
		        	}else{
		        		consulta += " and le.descripcion like '%"+filtro+"%'";
		        	}
        		}
        	}

        	Query q = session.createSQLQuery(consulta);
        
        	List<Object> lista = (List<Object>)q.list();
        	List<Lectura> lecturas = new ArrayList<Lectura>();
        	
        	if(lista!=null && lista.size()>0){
	        	for(Object obj:lista){
	        		Object[] lecObj = (Object[]) obj;
	        		Lectura lec = new Lectura();
	        		BigDecimal id = (BigDecimal) lecObj[0];
	        		BigDecimal codigo = (BigDecimal) lecObj[1];
	        		String desc = (String) lecObj[2];
	        		lec.setId(id.longValue());
	        		lec.setCodigo(codigo.longValue());
	        		lec.setDescripcion(desc);
	        		lecturas.add(lec);
	        	}
        	}
        	
        	return lecturas;
        	
        } catch (HibernateException hibernateException) {
        	logger.error("No se pudo listar ", hibernateException);
	        return null;
        }catch (Exception e) {
        	logger.error("No se pudo listar ", e);
	        return null;
        }finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
	}
	
	@Override
	public Boolean guardarLecturaYDetalles(Set<LecturaDetalle> lecturaDetalles, Lectura lectura) {

		Session session = null;
		Transaction tx = null;
		
		try {
			
			// obtenemos una sesión
			session = getSession();
			// creamos la transacción
			tx = session.getTransaction();
			tx.begin();
			
			//guardamos la lectura primero
			//para que se cree el ID
			session.save(lectura);
			//hacemos commit a la transacción para que 
			//se refresque la base de datos.
			tx.commit();
			
			//Recorro los interchanges para actualizarlos
			for(LecturaDetalle lecturaDetalle:lecturaDetalles){
				try {
					lecturaDetalle.setLectura(lectura);
				} catch (Exception e) {
					logger.error(e.getMessage());
				}
			}
			//ya con el id guardado
			//le seteamos a la lectura la lista de detalles
			lectura.setDetalles(lecturaDetalles);
			tx.begin();
			//Actualizamos la lectura con la lista de detalles
			session.update(lectura);
			// Comiteo
			tx.commit();
			return true;

		} catch (RuntimeException e) {
			// si ocurre algún error intentamos hacer rollback
			if (tx != null && tx.isActive()) {
				try {
					tx.rollback();
					return false;
				} catch (HibernateException e1) {
					logger.error("no se pudo hacer rollback", e1);
				}
				logger.error("no se pudo guardar", e);
				return false;
			}
			return true;

		} finally {
			try {
				session.close();
			} catch (Exception e) {
				logger.error("No se pudo cerrar la sesión", e);
			}
		}
	}
	
	@Override
	public Boolean actualizarLecturaYDetalles(Boolean noAnexar,Set<LecturaDetalle> lecturaDetalles, Lectura lectura) {

		Session session = null;
		Transaction tx = null;
		
		try {
			
			// obtenemos una sesión
			session = getSession();
			// creamos la transacción
			tx = session.getTransaction();
			
			if (noAnexar!=null && noAnexar == true) {
				Set<LecturaDetalle> lecturaDetallesViejos = new HashSet<LecturaDetalle>();
				lecturaDetallesViejos = lectura.getDetalles();

				tx.begin();
				for (LecturaDetalle lecturaDetalle : lecturaDetallesViejos) {
					try {
						session.delete(lecturaDetalle);
					} catch (Exception e) {
						logger.error(e.getMessage());
					}
				}
				tx.commit();
			}
			
			//Recorro los detalles para actualizarlos
			for(LecturaDetalle lecturaDetalle:lecturaDetalles){
				try {
					lecturaDetalle.setLectura(lectura);
				} catch (Exception e) {
					logger.error(e.getMessage());
				}
			}
			//ya con el id guardado
			//le seteamos a la lectura la lista de detalles
			lectura.setDetalles(lecturaDetalles);
			tx.begin();
			//Actualizamos la lectura con la lista de detalles
			session.update(lectura);
			// Comiteo
			tx.commit();
			return true;

		} catch (RuntimeException e) {
			// si ocurre algún error intentamos hacer rollback
			if (tx != null && tx.isActive()) {
				try {
					tx.rollback();
					return false;
				} catch (HibernateException e1) {
					logger.error("no se pudo hacer rollback", e1);
				}
				logger.error("no se pudo guardar", e);
				return false;
			}
			return true;

		} finally {
			try {
				session.close();
			} catch (Exception e) {
				logger.error("No se pudo cerrar la sesión", e);
			}
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Lectura> listarLecturaFiltradas(Lectura lectura, ClienteAsp cliente){
		Session session = null;
        try {
        	//obtenemos una sesión
			session = getSession();
        	Criteria crit = session.createCriteria(getClaseModelo());
        	if(lectura!=null){
        		if(lectura != null && lectura.getFechaDesde() != null && !"".equals(lectura.getFechaDesde()))
        			crit.add(Restrictions.ge("fecha", lectura.getFechaDesde()));
        		if(lectura != null && lectura.getFechaHasta() != null && !"".equals(lectura.getFechaHasta()))
        			crit.add(Restrictions.le("fecha", lectura.getFechaHasta()));
        		if(lectura != null && lectura.getCodigoDesde() != null && !"".equals(lectura.getCodigoDesde()))
        			crit.add(Restrictions.ge("codigo", lectura.getCodigoDesde()));
        		if(lectura != null && lectura.getCodigoHasta() != null && !"".equals(lectura.getCodigoHasta()))
        			crit.add(Restrictions.le("codigo", lectura.getCodigoHasta()));
        	}
        	if(lectura!=null){
	        	Criteria critLecturaDetalle = session.createCriteria(LecturaDetalle.class);
	        	critLecturaDetalle.createCriteria("lectura", "lectura");
	        	critLecturaDetalle.createCriteria("elemento", "elemento");
	        	boolean bandera = false;
	        	// ClienteEmp
	        	if(lectura.getCodigoCliente()!=null && !lectura.getCodigoCliente().trim().equals("")){
		        	critLecturaDetalle.createCriteria("elemento.clienteEmp", "clienteEmp");
		        	critLecturaDetalle.add(Restrictions.eq("clienteEmp.codigo", lectura.getCodigoCliente()));
		        	bandera = true;
        		}	
	        	// Tipo Elemento
		        if(lectura.getCodigoTipoElemento()!=null && !lectura.getCodigoTipoElemento().trim().equals("")){
		        	critLecturaDetalle.createCriteria("elemento.tipoElemento", "tipoElemento");
		        	critLecturaDetalle.add(Restrictions.in("tipoElemento.codigo", lectura.getCodigoTipoElemento().split(",")));
		        	bandera = true;
		        }	
	        	// Elemento
		        if(lectura.getCodigoElementoDesde()!=null && !lectura.getCodigoElementoDesde().trim().equals("") && lectura.getCodigoElementoHasta()!=null && !lectura.getCodigoElementoHasta().trim().equals("")){	
		        	critLecturaDetalle.add(Restrictions.between("elemento.codigo", lectura.getCodigoElementoDesde(), lectura.getCodigoElementoHasta()));
		        	bandera = true;
		        }	
		        if(bandera ==true){
		        	critLecturaDetalle.setProjection(Projections.property("lectura.id"));
		        	// Lista de id
		        	critLecturaDetalle.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
		        	List list = critLecturaDetalle.list();
		        	crit.add(Restrictions.in("id", list));
        		}
        	}	
        	if(cliente != null){
        		//crit.createCriteria("empresa").add(Restrictions.eq("cliente", cliente));
        		crit.add(Restrictions.eq("clienteAsp", cliente));
        	}
        	
        	crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
            return crit.list();
        } catch (HibernateException hibernateException) {
        	logger.error("No se pudo listar ", hibernateException);
	        return null;
        }finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
    }
	
	@Override
	public Long traerUltCodigoPorClienteAsp(ClienteAsp cliente){
		Session session = null;
        try {
        	//obtenemos una sesión
			session = getSession();
        	Criteria crit = session.createCriteria(getClaseModelo());
        	if(cliente!=null){
	        	crit.add(Restrictions.eq("clienteAsp", cliente));	        	
	        	crit.setProjection(Projections.max("codigo"));
        	}
        	crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
        	List<Long> result = crit.list();
        	if(result.size() == 1){
        		Long rta = result.get(0);
        		if(rta == null)
        			return (long) 0;
        		else
        			return rta; 
        	}
            return null;
        } catch (HibernateException hibernateException) {
        	logger.error("No se pudo listar ", hibernateException);
	        return null;
        }finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
    }
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Lectura> listarLecturaFiltradasPorSQL(Lectura lectura, ClienteAsp cliente){
		Session session = null;
        try {
        	//obtenemos una sesión
			session = getSession();
			
			String consulta = "SELECT * FROM dbo.lecturas lec where 1 = 1 ";
        	
			if(cliente != null){
    			consulta += " and lec.clienteAsp_id = " + cliente.getId() +"";
        	}
			
			if(lectura!=null){
        		if(lectura != null && lectura.getFechaDesde() != null && !"".equals(lectura.getFechaDesde()))
        			consulta += " and lec.fecha >= '" + lectura.getFechaDesdeStr() +"'";
        		if(lectura != null && lectura.getFechaHasta() != null && !"".equals(lectura.getFechaHasta()))
        			consulta += " and lec.fecha <= '" + lectura.getFechaHastaStr() +"'";
        		if(lectura != null && lectura.getCodigoDesde() != null && !"".equals(lectura.getCodigoDesde()))
        			consulta += " and lec.codigo >= " + lectura.getCodigoDesde()+""; 
        		if(lectura != null && lectura.getCodigoHasta() != null && !"".equals(lectura.getCodigoHasta()))
        			consulta += " and lec.codigo <= " + lectura.getCodigoHasta()+"";
        		
	        	if((lectura.getCodigoCliente()!=null && !lectura.getCodigoCliente().trim().equals("")) ||
	        			(lectura.getCodigoTipoElemento()!=null && !lectura.getCodigoTipoElemento().trim().equals("")) ||
	        			(lectura.getCodigoElementoDesde()!=null && !lectura.getCodigoElementoDesde().trim().equals("")) || 
	        			(lectura.getCodigoElementoHasta()!=null && !lectura.getCodigoElementoHasta().trim().equals("")))
	        	{
	        		
		        	consulta += " and lec.id in (select distinct ld.lectura_id from lecturaDetalle ld " +
								" left join elementos ele on ld.elemento_id = ele.id " +
								" left join clientesEmp cli on ele.clienteEmp_id = cli.id " +
								" left join tipoElementos tip on ele.tipoElemento_id = tip.id " +
								" where 1 = 1 ";
		        	
		        	// ClienteEmp
		        	if(lectura.getCodigoCliente()!=null && !lectura.getCodigoCliente().trim().equals("")){
		        		consulta += " and cli.id = "+lectura.getCodigoCliente()+"";
	        		}	
		        	// Tipo Elemento
			        if(lectura.getCodigoTipoElemento()!=null && !lectura.getCodigoTipoElemento().trim().equals("")){
			        	consulta += " and tip.codigo in ("+lectura.getCodigoTipoElemento()+")";
			        }	
		        	// Elemento
			        if(lectura.getCodigoElementoDesde()!=null && !lectura.getCodigoElementoDesde().trim().equals("")){
			        	consulta += " and ele.codigo >= '"+ lectura.getCodigoElementoDesde()+"'";
			        }
			        if(lectura.getCodigoElementoHasta()!=null && !lectura.getCodigoElementoHasta().trim().equals("")){
			        	consulta += " and ele.codigo <= '"+ lectura.getCodigoElementoHasta() +"'";
			        }
			        
			        consulta+= " )";
			        
	        	}
			}
        	        	
        	SQLQuery q = session.createSQLQuery(consulta).addEntity(Lectura.class);			
			
			return (List<Lectura>)q.list();
            
        } catch (HibernateException hibernateException) {
        	logger.error("No se pudo listar ", hibernateException);
	        return null;
        }finally{
        	try{
        		session.close();
        	}catch(Exception e){
        		logger.error("No se pudo cerrar la sesión", e);
        	}
        }
    }
}
